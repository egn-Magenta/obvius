# For `docker push` to work, the following envionment variables have to set in
# the Gitlab UI.
# RELEASE_REGISTRY_USER
# RELEASE_REGISTRY_PASSWORD

stages:
    - lint-build
    - test
    - release
    - trigger

variables:
    RELEASE_REGISTRY_IMAGE: index.docker.io/magentaaps/obvius-core
    IMAGE_SHA: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}
    IMAGE_LATEST: ${RELEASE_REGISTRY_IMAGE}:debian-latest
    IMAGE_TESTING: ${RELEASE_REGISTRY_IMAGE}:debian-testing
    IMAGE_MASTER: ${RELEASE_REGISTRY_IMAGE}:debian-master
    #TODO: Push tagged versions to Docker Hub
    #IMAGE_VERSION: ${RELEASE_REGISTRY_IMAGE}:${CI_COMMIT_TAG}


# Build stage
#############

# Disables cache to ensure upstream image is updated
# Scheduled build ensures that cache for continuous builds will be populated & fresh
build-nocache:
    stage: lint-build
    only:
        - schedules
    image:
        name: gcr.io/kaniko-project/executor:debug-v0.19.0
        entrypoint: [""]
    tags:
    - docker
    script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/Dockerfile
      --destination=${IMAGE_SHA}
      --cache=false

build:
    stage: lint-build
    except:
        - schedules
    image:
      name: gcr.io/kaniko-project/executor:debug-v0.19.0
      entrypoint: [""]
    tags:
      - docker
    script:
      - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
      - /kaniko/executor
        --context=$CI_PROJECT_DIR
        --dockerfile=$CI_PROJECT_DIR/docker/Dockerfile
        --destination=${IMAGE_SHA}
        --cache=true

unit-test:
    stage: test
    image: ${IMAGE_SHA}
    variables:
        GIT_STRATEGY: none
    tags:
        - docker
    script:
        - cd /var/www/obvius/perl
        # Ensure all modules are installed to allow for testing
        - perl Makefile.PL && make
        # Dynamically generate perl script that attempts to load all modules
        - ../tests/list_module_usages.sh /var/www/obvius/ > t/moduletest.t
        # Run tests with Devel::Cover, generate Clover and HTML reports
        - cover -test $CI_PROJECT_DIR/db-cover -report clover -report html
        # Run tests using JUnit formatter
        - prove -r --formatter=TAP::Formatter::JUnit --timer t/| tee $CI_PROJECT_DIR/db-cover/junit.xml
    coverage: /^Total.*\s(\d+\.\d)$/
    artifacts:
        when: always
        paths:
          - $CI_PROJECT_DIR/db-cover/
        reports:
            junit: $CI_PROJECT_DIR/db-cover/junit.xml
    

# Release stage
###############

.release-default: &release-default
    stage: release
    image: alpine
    variables:
        GIT_STRATEGY: none # We do not need the source code
    tags:
        - docker
    before_script:
        - apk add skopeo

# Push public images based on development, testing and master
release-dev:
    <<: *release-default
    rules:
        - if: $CI_COMMIT_REF_NAME == "development"
    script:
        - skopeo copy
            --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
            --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
            "docker://${IMAGE_SHA}"
            "docker://${IMAGE_LATEST}"

release-testing:
    <<: *release-default
    rules:
        - if: $CI_COMMIT_REF_NAME == "testing"
    script:
        - skopeo copy
            --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
            --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
            "docker://${IMAGE_SHA}"
            "docker://${IMAGE_TESTING}"

release-master:
    <<: *release-default
    rules:
        - if: $CI_COMMIT_REF_NAME == "production"
    script:
        - skopeo copy
            --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
            --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
            "docker://${IMAGE_SHA}"
            "docker://${IMAGE_MASTER}"


# Trigger downstream stage
##########################

trigger-ku:
    stage: trigger
    image: alpine
    variables:
        GIT_STRATEGY: none # We do not need the source code
    tags:
        - docker
    before_script:
        - apk add curl
    rules:
        - if: '$CI_COMMIT_REF_NAME == "testing" || $CI_COMMIT_REF_NAME == "development"'
    script:
        - "curl -X POST -F token=$CI_JOB_TOKEN -F ref=$CI_COMMIT_REF_NAME https://git.magenta.dk/api/v4/projects/72/trigger/pipeline"
