default:
    interruptible: true

stages:
    - lint-build
    - test
    - release
    - trigger

variables:
    KANIKO_VERSION: v1.6.0
    RELEASE_REGISTRY_IMAGE: index.docker.io/magentaaps/obvius-core
    IMAGE_CACHE_REGISTRY: $CI_REGISTRY_IMAGE/cache
    IMAGE_SHA: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}
    IMAGE_SHA_EXPERIMENTAL: ${CI_REGISTRY_IMAGE}:buildkit-${CI_COMMIT_SHA}
    IMAGE_LATEST: ${RELEASE_REGISTRY_IMAGE}:latest
    IMAGE_LATEST_EXPERIMENTAL: ${RELEASE_REGISTRY_IMAGE}:latest-buildkit

# Only run pipeline when pushing a tag or a branch.
# This is a workaround for a bug causing detached pipelines on MRs
workflow:
    rules:
        - if: $CI_COMMIT_TAG
        - if: $CI_COMMIT_BRANCH

# Lint/Build stage
#############

Lint dockerfile:
    stage: lint-build
    image: hadolint/hadolint:latest-alpine
    before_script:
        - apk add fd
    script:
        - echo "Running Hadolint, a Dockerfile linter"
        - echo "For more information about reported errors, visit the Hadolint wiki on https://github.com/hadolint/hadolint/wiki"
        # Run fd without exec arg to produce a list of files to be linted
        - fd Dockerfile
        # Run hadolint on every Dockerfile
        - fd Dockerfile --exec hadolint

.build-default: &build-default
    stage: lint-build
    image:
        name: gcr.io/kaniko-project/executor:${KANIKO_VERSION}-debug
        entrypoint: [""]
    tags:
    - high-mem
    before_script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json

# Disables cache to ensure upstream image is updated
# Scheduled build ensures that cache for continuous builds will be populated & fresh
Build image (no cache):
    <<: *build-default
    rules:
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: on_success
        - when: never
    script:
    - /kaniko/executor
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/Dockerfile
      --destination=${IMAGE_SHA}
      --cache=false

Build image:
    <<: *build-default
    rules:
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: never
        - when: on_success
    script:
      - /kaniko/executor
        --context=$CI_PROJECT_DIR
        --dockerfile=$CI_PROJECT_DIR/docker/Dockerfile
        --destination=${IMAGE_SHA}
        --cache=true

.build-default-experimental: &build-default-experimental
    stage: lint-build
    rules:
      - if: $CI_COMMIT_BRANCH
    needs: []
    tags:
      - buildkit
    image:
      name: moby/buildkit:rootless
      entrypoint: [ "sh", "-c" ]
    variables:
      BUILDKITD_FLAGS: --oci-worker-no-process-sandbox
      BUILDKIT_PROGRESS: plain
    before_script:
      - |
        mkdir ~/.docker
        ci_auth=$(echo -n "$CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD" | base64)
        release_auth=$(echo -n "$RELEASE_REGISTRY_USER:$RELEASE_REGISTRY_PASSWORD" | base64)
        echo "{\"auths\": {\"$CI_REGISTRY\": {\"auth\": \"$ci_auth\"}, \"$RELEASE_REGISTRY\": {\"auth\": \"$release_auth\"}}}" > ~/.docker/config.json

Build image (experimental):
    <<: *build-default-experimental
    rules:
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: never
        - when: on_success
    script:
      - |
        buildctl-daemonless.sh build \
            --frontend=dockerfile.v0 \
            --local context=$CI_PROJECT_DIR \
            --local dockerfile=$CI_PROJECT_DIR/docker \
            --import-cache type=registry,ref=$IMAGE_CACHE_REGISTRY \
            --export-cache type=registry,ref=$IMAGE_CACHE_REGISTRY \
            --output type=image,name=$IMAGE_SHA_EXPERIMENTAL,push=true

Build image (experimental, no cache):
    <<: *build-default-experimental
    rules:
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: on_success
        - when: never
    script:
      - |
        buildctl-daemonless.sh build \
            --frontend=dockerfile.v0 \
            --local context=$CI_PROJECT_DIR \
            --local dockerfile=$CI_PROJECT_DIR/docker \
            --export-cache type=registry,ref=$IMAGE_CACHE_REGISTRY \
            --output type=image,name=$IMAGE_SHA_EXPERIMENTAL,push=true

unit-test: &unit-test
    stage: test
    image: ${IMAGE_SHA}
    needs: ["Build image"]
    rules:
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: never
        - when: on_success
    variables:
        GIT_STRATEGY: none
        COVERAGE_FOLDER: db-cover
    tags:
        - docker
    script:
        - cd /var/www/obvius/perl
        # Ensure all modules are installed to allow for testing
        - perl Makefile.PL && make
        # Dynamically generate perl script that attempts to load all modules
        - ../tests/list_module_usages.sh /var/www/obvius/ > t/moduletest.t
        # Run tests with Devel::Cover, generate Clover and HTML reports
        - cover -test $CI_PROJECT_DIR/$COVERAGE_FOLDER -report clover -report html
        # Run tests using JUnit formatter
        - prove -r --formatter=TAP::Formatter::JUnit --timer t/| tee $CI_PROJECT_DIR/$COVERAGE_FOLDER/junit.xml
    coverage: /^Total.*\s(\d+\.\d)$/
    artifacts:
        when: always
        paths:
          - $CI_PROJECT_DIR/$COVERAGE_FOLDER/
        reports:
            junit: $CI_PROJECT_DIR/$COVERAGE_FOLDER/junit.xml


unit-test-experimental:
    <<: *unit-test
    image: ${IMAGE_SHA_EXPERIMENTAL}
    needs: ["Build image (experimental)"]
    variables:
        COVERAGE_FOLDER: db-cover-experimental
    artifacts:
        when: always
        paths:
          - $CI_PROJECT_DIR/$COVERAGE_FOLDER/
        reports:
            junit: $CI_PROJECT_DIR/$COVERAGE_FOLDER/junit.xml

# Release stage
###############

.release-default: &release-default
    stage: release
    image: alpine
    # Don't release scheduled builds
    rules:
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: never
        - when: on_success
    variables:
        GIT_STRATEGY: none # We do not need the source code
    tags:
        - docker
    before_script:
        - apk add skopeo

# Push public images based on development, testing and master
release-latest:
    <<: *release-default
    rules:
        - if: $CI_COMMIT_REF_NAME == "master"
    script:
        - skopeo copy
            --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
            --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
            "docker://${IMAGE_SHA}"
            "docker://${IMAGE_LATEST}"

release-latest-experimental:
    <<: *release-default
    rules:
        - if: $CI_COMMIT_REF_NAME == "master"
    script:
        - skopeo copy
            --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
            --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
            "docker://${IMAGE_SHA_EXPERIMENTAL}"
            "docker://${IMAGE_LATEST_EXPERIMENTAL}"

Trigger KU rebuild:
    stage: trigger
    image: alpine
    rules:
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: never
        - when: on_success
    variables:
        GIT_STRATEGY: none # We do not need the source code
    before_script:
        - apk add curl
    rules:
        - if: $CI_COMMIT_REF_NAME == "master"
    script:
        - "curl -X POST -F token=$CI_JOB_TOKEN -F ref=$CI_COMMIT_REF_NAME https://git.magenta.dk/api/v4/projects/72/trigger/pipeline"
