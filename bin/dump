#!/usr/bin/perl

# dump - dump an Obvius document.
#
#   TODO: XXX Handle document parameters.
#
#   See also: create, delete.
#
# Copyright (C) 2004, Magenta. By Adam Sjøgren. Under the GPL.
#
# $Id$

use strict;
use warnings;

use Obvius;
use Obvius::Config;
use Obvius::Log;
use Data::Dumper;
use WebObvius::InternalProxy;
use XML::Simple;
use MIME::Base64;

use Getopt::Long;

my ( $site, $output, $recursive, $one_version, $docid, $help);

$output = '-';

GetOptions(
	recursive    => \$recursive,
	oneversion   => \$one_version,
	docid        => \$docid,
	"o|output=s" => \$output,
	help         => \$help,
) or usage();

sub usage
{
	print <<EOT;
Usage: dump [OPTIONS] site document [documents...]

  --recursive, -r  dump recursively
  --docid          the documents are given as docids, not as paths
  --output,    -o  output file name

Note: wildcards do not work. Sorry.

NOTE: Publish fields are not exported.

EOT
	exit 0;
}

$site = shift @ARGV;
usage() if $help or not $site or not @ARGV;

my $conf = Obvius::Config-> new( $site);
die "Could not get config for $site" unless defined $conf;

my $log = Obvius::Log->new('notice');
die "Could not get logging" unless defined $log;

my $obvius = Obvius-> new(
	$conf, undef, undef, undef, undef, undef, 
	log=>$log
);
die "Could not get Obvius object for $site" unless defined $obvius;
$obvius->{USER} = 'admin';

if ( $output ne '-') {
	open F, ">", $output or die "Cannot write to $output:$!\n";
	$output = \*F;
} else {
	$output = \*STDOUT;
}

# Figure out which fields are binary and should be encoded:
my %binary_names;
my $bin_fieldtypes = $obvius-> get_table_data(
	'fieldtypes', 
	'where' => "bin = 1"
) || [];
if(scalar(@$bin_fieldtypes)) {
	my $where = 
		"type IN ('" . 
		join("', '", map { $_->{id} } @$bin_fieldtypes) 
		. "')";
	my $bin_fields = $obvius-> get_table_data(
		'fieldspecs', 
		'where' => $where
	) || [];
	$binary_names{ $_->{name} } = 1 for @$bin_fields;
}

my @docids;
for my $tok ( @ARGV) {
	my $doc;
	if ( $docid) {
		die "'$tok' is not an integer\n" unless $tok =~ /^\d+$/;
		$doc = $obvius-> get_doc_by_id( $tok);
		die "Couldn't find document id $tok" unless $doc;
	} else {
		die "Wildcards are not supported\n" if $tok =~ m/\*/;
		die "Document path `$tok' is invalid, must begin with a slash ( Did you mean \/$tok perhaps? )\n" 
			unless $tok =~ m/^\//;
		$doc = $obvius-> lookup_document( $tok);
		die "Couldn't find document path '$tok'" unless $doc;
	}
	push @docids, $doc;
}


print $output '<?xml version="1.0" encoding="iso-8859-1" standalone="yes"?>', "\n";
print $output "<documentcollection>\n";
dump_doc($_) for @docids;
print $output "</documentcollection>\n";
exit;

sub is_proxy_document {
     my ($doc) = @_;
     
     my $vdoc = $obvius->get_public_version($doc) || $obvius->get_latest_version($doc);
     return 0 if (!$vdoc);
     return $vdoc->real_doctype($obvius)->Name eq 'InternalProxy';
}

sub dump_proxy_doc {
     my ( $doc ) = @_;
     
     my $vdoc = $obvius->get_public_version( $doc ) || $obvius->get_latest_version ( $doc );

     return undef if !$vdoc;
     return undef if $doc->Parent < 1;

     my $parent = $obvius->get_doc_by_id( $doc->Parent);
     return undef if !$parent;
     
     my $user = $obvius->get_user ($doc->Owner);
     my $group = $obvius->get_group ($doc-> Grp);
     $user = $user ? $user->{login} : 'admin';
     $group = $group ? $group->{login} : 'admin';

     my %res = (obvius_dump_type_name => $vdoc->real_doctype($obvius)->Name,
                name => $doc->Name,
                parent => $obvius->get_doc_uri( $parent ),
                lang => $vdoc->Lang,
                grp => $group,
                user => $user,
                public => $vdoc->Public
               );
     my @interesting_fields = ('title', 
                               'short_title', 
                               'seq', 
                               'internal_proxy_path', 
                               'internal_proxy_overload_rightboxes',
                               'rightboxes'
                              );
     
     my $ip = WebObvius::InternalProxy->new($obvius);
     my $fields = $ip->get_attrib($vdoc, @interesting_fields);
     
     if ($fields->{internal_proxy_overload_rightboxes}) {
          undef $fields->{rightboxes};
     }
     $res{fields} = $fields;

     print $output XMLout(\%res, 
                          rootname => 'document', 
                          noattr   => 1
                         ), "\n";
}    
     
     
     
                
     
     
sub dump_doc {
     my ($doc) = @_;
     
     if( is_proxy_document( $doc ) ) {
          dump_proxy_doc( $doc );
     } else {
          dump_normal_doc( $doc );
     }
     
     # Recursively:
     if ($recursive) {
          my $subdocs = $obvius-> get_docs_by_parent( $doc->Id);
          dump_doc($_) for @$subdocs;
     }
}

sub dump_normal_doc
{
	my $doc = $_[0];

	# Get all versions or the public/latest version:
	my $vdocs;

	if ( $one_version) {
		$vdocs= [ 
			$obvius->get_public_version( $doc) || 
			$obvius->get_latest_version( $doc)
		];

		# Remove funny things stored in the document object:
		$doc->delete('public_versions');
		$doc->delete('public_version');
	} else {
		$vdocs = $obvius->get_versions( $doc) || [];
	}

	# Get fields and store the type and login as strings:
	for ( @$vdocs) {
		$obvius-> get_version_fields($_, 255);
		$_->param( 
			obvius_dump_type_name => 
                                $obvius->get_version_type($_)->Name
		);
		$_->param(
			obvius_dump_user_login => 
				$obvius->get_user($_->User)->{login}
		) if $_->param('User');
	}

	# Clean up $doc-object:
	$doc-> delete('versions');

	# "Connect":
	$doc-> param( version => $vdocs);
	$doc-> param( obvius_dump_doc_uri => $obvius-> get_doc_uri( $doc));
	my $parent = $obvius-> get_doc_by_id( $doc->Parent);
	if ($parent) {
		$doc-> param( obvius_dump_parent_uri => $obvius-> get_doc_uri( $parent));
	}
	$doc-> param( obvius_dump_type_name   => $obvius-> get_document_type( $doc)->Name);

	my $user  = $obvius-> get_user( $doc-> Owner);
	if ( $user) {
		$doc-> param( obvius_dump_owner_login => $user->{login});
	} else {
		$doc-> param( obvius_dump_owner_login => 'UNKNOWN');
		warn "** warning: document ", $obvius-> get_doc_uri( $doc), " doesn't have a valid owner\n";
	}
	my $group = $obvius-> get_group( $doc-> Grp);
	if ( $group) {
		$doc-> param( obvius_dump_grp_name    => $group->{name});
	} else {
		$doc-> param( obvius_dump_grp_name    => 'UNKNOWN');
		warn "** warning: document ", $obvius-> get_doc_uri( $doc), " doesn't have a valid group\n";
	}
	

	# Un-objectify:
	my $doc_hash = hashify($doc);

	# Dump:
	print $output XMLout(
		$doc_hash, 
		rootname => 'document', 
		noattr   => 1
	), "\n";

}

sub hashify
{
	my ($obj, $name) = @_; # name is optional

	# XXX TODO: Handle binary fields better!

	my $ref = ref $obj;

	if (!$ref) { 
		# Scalar:
		if (
			defined $obj and 
			defined $name and 
			$binary_names{$name}
		) { # base64-encode binary fields:
			return encode_base64( $obj);
		}
		return defined($obj) ? urlify($obj) : '';
	} elsif ( $ref eq 'ARRAY') {
		return [ map { hashify($_) } @$obj ];
	} elsif ($ref eq 'HASH') {
		return { map { lc($_) => hashify($obj->{$_}, lc($_)) } keys (%$obj) };
	} elsif ($obj->UNIVERSAL::can('param')) { # Object with param-method:
		return { map { lc($_) => hashify($obj->param($_), lc($_)) } $obj->param() };
	} else {
		return 'UNHASHIFIABLE';
	}
}

# Temporary implementation of URL-rewriting:
# Convert xxxx.docid to ${path}.docid.
sub urlify 
{
	my $text = $_[0];

	$text =~ s!/(\d+)\.docid!docid_to_url($1)!ge;

	# Brain-dead XML 1.0 cannot contain certain characters, and thus, 
	# XML importers die on things such as &#12; . So beautiful, so useless.
	# ( we preserve \n, \r, and \t though ).
	$text =~ s/([\x00-\x08\x0B\x0C\x0E-\x1F\\])/sprintf(q(\\x%02x), ord($1))/gse;

	return $text;
}

sub docid_to_url
{
	my ($docid) = @_;

	my $doc = $obvius-> get_doc_by_id( $docid);

	if ( $doc) {
		return $obvius-> get_doc_uri( $doc) . ".docid";
	} else {
		return "/" . $docid . ".docid";
	}
}
