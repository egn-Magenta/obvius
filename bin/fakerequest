#!/usr/bin/perl -w
# $Id$

# generates a fake request without apache
# run in ./conf directory so the setup.pl is accessible

use strict;
use warnings;

package main;
use Carp;
use vars qw($site $req $uri %param);

my $handler = 'Public';
$uri = @ARGV ? $ARGV[0] : '/';
( $uri, %param) = ( $1, map { m/([^=]*)=(.*)$/ ? ( $1, $2) : ( $_, 1) } split('&', $2))
	if $uri =~ /^([^\?]*)\?(.*)$/;
$handler = 'Admin', $uri = $1
	if $uri =~ m[^\/admin(.*)$];
$uri .= '/' unless $uri =~ m#/$#;

my $file = './setup.pl'; # XXX

{
open F, $file or die "Cannot open $file";
local $/;
die "Cannot locate package in $file\n" unless <F> =~ /package (\w+)::Site::Admin/;
close F;
$site = $1;
}


sub Apache2::ServerUtil::server_root   { '/tmp' }
sub Apache2::ServerUtil::restart_count { 0 }
sub Apache2::RequestUtil::request      { $req }
sub Apache2::Util::ht_time             { 0 }

$ENV{'MOD_PERL'} = 'mod_perl/2';
$INC{'APR/Request/Apache2.pm'}++;
sub APR::Request::Apache2::handle      { $main::req }

# fuck xml
$INC{'XML/Simple.pm'}++;
sub XML::Simple::import
{ 
	no strict;
	*{(caller)[0]."::XMLin"} = sub {};
	use strict;
} 

require $file;

HTML::Mason::Request::ApacheHandler-> valid_params->{apache_req}->{isa} = 'FakeRequest';

package FakeRequest;
use Carp;

sub new 
{ 
	local $_ = shift; 
	bless { 
		notes      => {},
		pnotes     => {},
		dir_config => {},
		param      => \%main::param,
		@_ ,
	}, $_ 
}

sub _store
{
	my ( $id, $hashref, $self, $name, @x) = @_;

	unless ( defined $name) {
		my $ref = $self->{$id} || {};
		return $hashref ? $ref : keys %$ref;
	}

	if ( @x) {
		croak "$id($name) too many parameters" if 1 != @x;
		$self-> {$id}->{$name} = $x[0];
#		print "$id($name) set $x[0]\n";
	} elsif ( exists $self-> {$id}->{$name}) {
		return $self-> {$id}->{$name};
	} else {
		return;
	}
}

sub dir_config        { _store( 'dir_config', 0, @_ ) }
sub header_out        { _store( 'header_out', 1, @_ ) }
sub notes             { _store( 'notes',      0, @_ ) }
sub param             { _store( 'param',      0, @_ ) }
sub pnotes            { _store( 'pnotes',     0, @_ ) }

sub add               { $_[0]-> header_out( $_[1], $_[2] ) } # headers_out
sub args              {}
sub connection        { $_[0] }
sub get_basic_auth_pw { 0, $_[0]-> {password} }
sub header_only       { 0 } 
sub headers_in        { $_[0]-> {headers_in} }
sub headers_out       { $_[0] }
sub log               { warn @_, "\n" if 0 }
sub print             { CORE::print @_ }
sub register_cleanup  {}
sub request_time      { 0 }
sub rflush            {}
sub server            { $_[0] }
sub send_http_header  {}
sub set_content_length{}
sub the_request       { $_[0]-> uri }
sub upload            {}

sub AUTOLOAD
{
	use vars qw($AUTOLOAD);
	my $m = $AUTOLOAD;
	$m =~ s/^.*:://;
	my $self = shift;
	if ( exists $self->{$m}) {
		if ( 0 == @_)  {
			return $self-> {$m};
		} elsif ( 1 == @_)  {
			$self-> {$m} = $_[0]
		} else {
			croak "Method FakeRequest::$m called with @_\n";
		}
	} else {
		croak "Method FakeRequest::$m is not implemented\n";
	}
}

sub DESTROY {}

package main;


my $handle = eval "\$${site}::Site::$handler";

$req  = FakeRequest-> new(
	uri		=> $uri,
	document_root	=> "$handle->{BASE}/docs",
	filename	=> '',
	path_info	=> '/',
	method		=> 'GET',
	content_type    => undef,
	is_initial_req  => 1,
	no_cache	=> 1,
	dir_config	=> {
		AddPrefix	=> '',
		RemovePrefix	=> '',
	},
	headers_in	=> { 
		'User-Agent' => 'robotz',
	},
	user		=> 'admin',
	password	=> 'admin',
	server_hostname	=> 'localhost',
	remote_ip	=> '127.0.0.1',
	pool		=> 0,
	is_main		=> 1,
	main		=> 1,
	subprocess_env	=> '',
	jar		=> 0,
);

no warnings;
use HTML::Mason::Request;
*HTML::Mason::Request::rethrow_exception = sub {
	return if $^S;
	print STDERR "@_\n";
	exit(1);
};
use warnings;

$req-> notes('prefix', '');
my $res = $handle-> authen_handler( $req); 
die "auth bad $res\n" if $res;
$res = $handle-> access_handler( $req); 
die "access bad $res\n" if $res;
$res = $handle-> handler( $req); 
die "body bad $res\n" if $res;

print "\n";
while ( my ( $k, $v) = each %{$req->{header_out}}) {
	print "$k: @{$v}\n";
}
