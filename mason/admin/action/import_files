<h1>Importer filer</h1>
% if ( ! $u ) {
<form action="./" method="post" enctype="multipart/form-data">
<& /portal/util/identifier, pass=>{ obvius_command_import_files=>1 } &>
%#<p>Importer billeder fra: <% $source_dir %></p>
<input type="file" name="zip_file" /><br />
<p>Til: <input type="text" name="import_pictures_dest_url" id="import_pictures_dest_url" />  
<input onclick="<& /portal/util/navigator_link_start:onclick, path=>$dest_url, fieldname=>"import_pictures_dest_url" &>" type="button" value="<& /shared/msg, text=>'Find' &> ..." />
<p><input type="submit" name="import_files_do" value="Upload" /></p>
</form>
% } else {
<p>Billederne er nu uploadet</p>

% if ( $error ) {
<p>
<b>Advarsel</b><br />
F&oslash;lgende filer fra zipfilen blev ikke uploadet:<br />

%   foreach ( keys %files )
%   {
%     my $file = $files{$_};
%     if ( defined( $file->{error} ) ) {                                                                                                                                                            
<% $_ %><br />


%     }                                                                                                                                                            
%   }
<br /><br />Det kan skyldes at:<br />
- Filen har et ugyldigt filnavn<br />
- Zipfilen indeholder flere mapper, og filnavnet allerede findes<br />
</p>
% }           

% }

<%init>
my $dest_url = "/";
my $u;
my $zip_path = $r->pnotes('site')->{BASE} . "/var/picture_upload/";
my $error;
my %files = ();  

if ( $r->param( "import_files_do" ) )
{    


    $u = $obvius->lookup_document( $dest_url );
    if ( $u )
    {


        # Make a temp dir for this session
        my $tmp = time();
        mkdir ( $zip_path . $tmp );
        $zip_path .= $tmp;


	$dest_url = $r->param( "import_pictures_dest_url" );

        my $upload;

        for (( $r->upload )) {
    	    if ( $_->name =~ m/^zip_file$/ ) {
		$upload = $_;
		last;
	    }
	}

        if ( $upload ) {
    	    if ( $upload->filename ne '' and $upload->size != 0 and my $fh = $upload->fh ) {
		my $filename = $tmp . ".zip";
		local $/ = undef;
		if(open(FILE, ">$zip_path/" . $filename)) {
		    print FILE <$fh>;
		    close(FILE);
		}
		
		my $zipFile = Archive::Zip->new();
		unless ( $zipFile->read( "$zip_path/$filename" ) == AZ_OK )
		{
		    print STDERR "Error reading: $zip_path/$filename\n";
		    die 'read error';
		}
		
		foreach my $member ( $zipFile->members() )
		{
		    my @x = split( "/", $member->fileName );
		    my $file = pop( @x );
		    my %info = 
		    (    
		      orgFile => $member->fileName,
		      short => $file
		    );
		    
		    
		    if ( ! defined( $files{$file} ))
		    {
		      $zipFile->extractMemberWithoutPaths( $member->fileName, "$zip_path/$file" );
		      if ( ! $m->comp('import_files:do', source=>"$zip_path/$file", dest_url=>$dest_url) )
		      {
		        $info{error} = 1;
			$error = 1;
		      }
		      $files{$file} = \%info;

		    }
		    else
		    {
		       $info{error} = 1;
		       $error = 1;
		       $files{$member->fileName} = \%info; 
		    }
		
		}

	    }
	}

}


}

</%init>
<%once>
use Data::Dumper;
use POSIX qw(strftime);
use Archive::Zip qw( :ERROR_CODES :CONSTANTS );
</%once>


<%method do>
<%args>
$source
$dest_url
</%args>

<%init>
use File::Type;
my $ft = File::Type->new();

my $parent = $obvius->lookup_document( $dest_url );
die "Could not find dest path ($dest_url)" unless( $parent );


# Prepare a data fieldset for the document
my $data = new Obvius::Data( seq             => '-10',
			     sortorder       => '+seq,+title',
			     expires         => '9999-01-01 00:00:00',
			     docdate         => strftime('%Y-%m-%d 00:00:00', localtime),
			     subscribeable   => 'none',
			     );

# Get filename and set it as title

my @tmp = split( "/", $source );
my $title = pop( @tmp );

$data->param( title => $title);
$data->param( short_title => $title);

my $mime_type = $ft->mime_type($source);
open( FH, $source ) || die ( "Can't open file: $source\n" );

local $/ = undef; 

my $file =  $m->scomp('/shared/place_file_in_upload', 
		      fh => \*FH, 
		      type => $mime_type,
		      filename => $title);


$data->param( mimetype => $mime_type);
$data->param( size => -s $source );
$data->param( uploadfile => $file);
my %args=(
	  name=>$title,
	  grpid=>1,
	  lang=>"da",
	  doctypeid=>$obvius->get_doctype_by_name("FileUpload")->Id,
	  fields=>$data,
	  );

# XXX Send order:
my ($status, $message)=$obvius->send_order(
					   docid=>$parent->Id,
					   user=>$obvius->user,
					   command=>'new_document',
					   args=>\%args,
					   );


if ( $status eq "OK" )
{
    # Reset the args array
    %args = ();
      
    # Lookup the new document and get the latest version
    my $new_doc = $obvius->lookup_document( $obvius->get_doc_uri( $parent ) . $title );

    my $new_vdoc = $obvius->get_public_version($new_doc) || $obvius->get_latest_version($new_doc);
    
    # Initialize a Obvius::Data set, and lookup the doctype
    my $publish_fields = new Obvius::Data;
    my $doctype = $obvius->get_doctype_by_id($new_vdoc->Type);
    
    # Load the default values
    for(keys %{$doctype->{PUBLISH_FIELDS}}) {
	my $default_value = $doctype->{PUBLISH_FIELDS}->{$_}->{DEFAULT_VALUE};
	$publish_fields->param($_ => $default_value)  if(defined($default_value));
    }
    
    # published always defaults to now:
    $publish_fields->param('published' => $r->notes('now'));
    # Set the version and publish fields on the args hash
    $args{version} = $new_vdoc->Version if ( $new_vdoc );	
    $args{publish_fields} = $publish_fields;
    
    ($status, $message)=$obvius->send_order(
					       docid=>$new_doc->Id,
					       user=>$obvius->user,
					       command=>'publish',
					       args=>\%args,
					       );
    if ( $status eq "OK" )
    {
      return 1;
    }
    else
    {
      return 0;
    }
      
}
else
{
  return 0;
}

</%init>
</%method>
