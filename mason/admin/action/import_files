<h1>Importer filer</h1>
% if ( ! $u ) {
<form action="./" method="post" enctype="multipart/form-data">
<& /portal/util/identifier, pass=>{ obvius_command_import_files=>1 } &>
%#<p>Importer billeder fra: <% $source_dir %></p>
<input type="file" name="zip_file" /><br />
<p>Til: <input type="text" name="import_pictures_dest_url" id="import_pictures_dest_url" />  
<input onclick="<& /portal/util/navigator_link_start:onclick, path=>$dest_url, fieldname=>"import_pictures_dest_url" &>" type="button" value="<& /shared/msg, text=>'Find' &> ..." />
<p><input type="submit" name="import_files_do" value="Upload" /></p>
</form>
% } else {
<p>Filerne er nu uploadet</p>

% if ( $error ) {
<p>
<b>Advarsel</b><br />
F&oslash;lgende filer fra zipfilen blev ikke uploadet:<br />

<table>
%   foreach ( keys %files )
%   {
      <tr>
%     my $file = $files{$_};
%     if ( defined( $file->{error} ) ) {                                                                    
%       my $txt = $file->{text} || undef;
        <td><% $_ %></td><td><% $txt ? "($txt)" : "" %></td>
%     }
      </tr>
%   }
</table>
<br /><br />Det kan skyldes at:<br />
- Filen har et ugyldigt filnavn<br />
- Zipfilen indeholder flere mapper, og filnavnet allerede findes<br />
- At filerne har et ukendt ZIP komprimerings-format<br/>
</p>
% }           

% }

<%init>
my $dest_url = "/";
my $u;
my $zip_path = $r->pnotes('site')->{BASE} . "/var/picture_upload/";
my $error;
my %files = ();  

if ( $r->param( "import_files_do" ) )
{    


    $u = $obvius->lookup_document( $dest_url );
    if ( $u )
    {


        # Make a temp dir for this session
        my $tmp = time();
        mkdir ( $zip_path . $tmp );
        $zip_path .= $tmp;


	$dest_url = $r->param( "import_pictures_dest_url" );

        my $upload;

        for (( $r->upload )) {
    	    if ( $_->name =~ m/^zip_file$/ ) {
		$upload = $_;
		last;
	    }
	}

        if ( $upload ) {
    	    if ( $upload->filename ne '' and $upload->size != 0 and my $fh = $upload->fh ) {
		my $filename = $tmp . ".zip";
		local $/ = undef;
		if(open(FILE, ">$zip_path/" . $filename)) {
		    print FILE <$fh>;
		    close(FILE);
		}
        
        # Using unzip:
        my $file_details = `unzip -l $zip_path/$filename`; # get a list of the contained files
        my $begin = 0;
        my $end = 0;
        my @file_names;
        my @detail_lines = split /\n/, $file_details;
        # We collect the details in an array for use in decompression:
        foreach (@detail_lines) {
            # Unzip also lists folders inside the file, so those have to be escaped:
            unless ((rindex($_, '/') + 1) == length($_)) {
                if (rindex($_, '---') >= 0 && $begin) { # The info ends with hyphen lines.
                    $end = 1;
                }
                if ($begin && !$end) {
                    my @raw_details = split ' ', $_;
                    my @details_array;
                    foreach my $detail (@raw_details) {
                        push (@details_array, $detail);
                    }
                    my @file_components = split '/', $details_array[3];
                    my $file_name = pop(@file_components);
		            my %info = (
                        orgFile => $details_array[3],
                        short => $file_name
                    );
                    my $success = `unzip -j $zip_path/$filename $details_array[3] -d $zip_path/$file_name`;
                    if ($success != 0) {
			            $info{error} = 1;
			            $info{text} = 'An error occured while runnig Unzip.';
    			        $error = 1;
                    }
		    	    if ( ! $m->comp('import_files:do', source=>"$zip_path/$file_name", dest_url=>$dest_url) ) {
                        $info{error} = 1;
                        $error = 1;
                    }
                    $files{$file_name} = \%info;
                }
                if (rindex($_, '---') >= 0 && !$begin) { # The info contains 'table headers' before the actual file info.
                    $begin = 1;
                }
            }
        }
	    }
	}
    }
}

</%init>
<%once>
use POSIX qw(strftime);
</%once>


<%method do>
<%args>
$source
$dest_url
</%args>
<%init>

sub upload_image {
    use Image::Size;
    my ($data, $filename, $mime_type, $obvius) = @_;

    local $/ = undef;
    my ($title) = ($filename =~ m|/([^/]+)$|);
    my $fh;
    open ($fh, $filename) or return 0;
    
    my $path = $m->scomp('/shared/place_file_in_upload',
                             fh => $fh,
			     type => $mime_type,
			     filename => $filename);
    
    
    seek $fh, 0, 0;
    my $raw;
    do {
     local $/ = undef;
     $raw = <$fh>
    };
    close $fh;
    my ( $w, $h ) = imgsize( \$raw );

    $data->param( uploadfile => $path );
    $data->param( width => $w );
    $data->param( height => $h );
    $data->param( size => -s $filename );
    $data->param( mimetype => $mime_type );

    my %args=(
	      name=>$title,
	      grpid=>1,
	      lang=>"da",
	      doctypeid=>$obvius->get_doctype_by_name("Image")->Id,
	      fields=>$data,
	     );
    return \%args;

}

sub upload_file {
    my ($data, $f, $mime_type, $obvius) = @_;

    local $/ = undef;
    my ($title) = ($f =~ m|/([^/]+)$|);

    open (FH, $f) or return 0;

    my $filename =  $m->scomp('/shared/place_file_in_upload', 
			  fh => \*FH, 
			  type => $mime_type,
			  filename => $title);


    $data->param( mimetype => $mime_type);
    $data->param( size => -s $f );
    $data->param( uploadfile => $filename);

    my %args=(
	      name=>$title,
	      grpid=>1,
	      lang=>"da",
	      doctypeid=>$obvius->get_doctype_by_name("FileUpload")->Id,
	      fields=>$data,
	     );

    return \%args;
}

my @fe_array = ({ regex => qr|\.jpe?g$|,
		 mime_type => "image/jpeg"},
	       { regex => qr|\.bmp$|,
		 mime_type => "image/bmp" },
	       { regex => qr|\.gif$|,
		 mime_type => "image/gif" },
	       { regex => qr|\.txt$|, 
		 mime_type => "text/plain"},
	       { regex => qr|.*|,
		 mime_type => "application/octet-stream"});


my @mime_array = ({ regex => qr|image/|,
		    function => \&upload_image},
		  { regex => qr|.*|,
		    function => \&upload_file });

my $parent = $obvius->lookup_document( $dest_url );
die "Could not find dest path ($dest_url)" unless( $parent );


# Prepare a data fieldset for the document
my $data = new Obvius::Data( seq             => '-10',
			     sortorder       => '+seq,+title',
			     expires         => '9999-01-01 00:00:00',
			     docdate         => strftime('%Y-%m-%d 00:00:00', localtime),
			     subscribeable   => 'none',
			     );

# Get filename and set it as title

my @tmp = split( "/", $source );
my $title = pop( @tmp );

$data->param( title => $title);
$data->param( short_title => $title);
my ($mime_type, $args);

eval {
    use File::Type;
    my $ft = File::Type->new();
    $mime_type = $ft->mime_type($source);
};

if (!defined($mime_type)) {
    for (@fe_array) {
	my $r = $_->{regex};
	if ( $source =~ /$r/) {
	    $mime_type = $_->{mime_type};
	    last;
	}
    }
}

for (@mime_array) {
    my $regex = $_->{regex};
    if ($mime_type =~ /$regex/) {
	$args = $_->{function}->($data, $source, $mime_type, $obvius);
	last;
    }
}

return 0 if (!$args);

my ($status, $message)=$obvius->send_order(
					   docid=>$parent->Id,
					   user=>$obvius->user,
					   command=>'new_document',
					   args=>$args,
					   );


if ( $status eq "OK" )
{
    # Reset the args array
    my %args = ();
      
    # Lookup the new document and get the latest version
    my $new_doc = $obvius->lookup_document( $obvius->get_doc_uri( $parent ) . $title );

    my $new_vdoc = $obvius->get_public_version($new_doc) || $obvius->get_latest_version($new_doc);
    
    # Initialize a Obvius::Data set, and lookup the doctype
    my $publish_fields = new Obvius::Data;
    my $doctype = $obvius->get_doctype_by_id($new_vdoc->Type);
    
    # Load the default values
    for(keys %{$doctype->{PUBLISH_FIELDS}}) {
	my $default_value = $doctype->{PUBLISH_FIELDS}->{$_}->{DEFAULT_VALUE};
	$publish_fields->param($_ => $default_value)  if(defined($default_value));
    }
    
    # published always defaults to now:
    $publish_fields->param('published' => $r->notes('now'));
    # Set the version and publish fields on the args hash
    $args{version} = $new_vdoc->Version if ( $new_vdoc );	
    $args{publish_fields} = $publish_fields;
    
    ($status, $message)=$obvius->send_order(
					       docid=>$new_doc->Id,
					       user=>$obvius->user,
					       command=>'publish',
					       args=>\%args,
					       );
    if ( $status eq "OK" )
    {
      return 1;
    }
    else
    {
      return 0;
    }
      
}
else
{
  return 0;
}

</%init>
</%method>
