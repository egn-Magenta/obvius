<& ../top, javascript=>'admin_seqlist.js' &>

<table class="obvius-app-seqlist">
  <tr>
    <td colspan="2">
     <form>
         <& /shared/msg, text=>'Sequence number' &>:
         <input type="text" name="seq" size="5" value="<% $value %>" />
         <input onclick="javascript:return obvius_seqlist_save_and_close(this.form.seq.value, '<% $fieldname %>')" type="submit" value="<& /shared/msg, text=>'Save' &>" />
     </form>
     <hr />
    </td>
  </tr>
% if(scalar(@hidden_seqs)) {
  <tr>
    <th></th>
    <th style="text-align: left;"><& /shared/trans, en=>"Hidden documents", da=>"Skjulte dokumenter" &></th>
  </tr>
% }
% foreach my $seq (@hidden_seqs) {
    <& SELF:display_seq, seq=>$seq, inactive=>$inactive, next=>$next, prev=>$prev, new_document=>$new_document, fieldname=>$fieldname &>
% }
% if(scalar(@shown_seqs)) {
  <tr>
    <th></th>
    <th style="text-align: left;"><& /shared/trans, en=>"Shown documents", da=>"Viste dokumenter" &></th>
  </tr>
% }
% foreach my $seq (@shown_seqs) {
    <& SELF:display_seq, seq=>$seq, inactive=>$inactive, next=>$next, prev=>$prev, new_document=>$new_document, fieldname=>$fieldname &>
% }
</table>

<& ../bottom &>
%
%
<%method display_seq>
  <tr>
    <td class="seq" style="vertical-align: top;">
      <% $seq->{seq} |h %>
    </td>
    <td>
      <ul>
%     foreach my $sib (@{$seq->{sibs}}) {
%         if ($sib->{fake} or ($sib->{doc}->Id eq $doc->Id)) {
        <li class="current"><% $sib->{title} |h %>
          <span>
%             if ($inactive) {
            <img class="obvius-inactive" width="7" height="6" src="/pics/icons/sort-down-inactive.png" alt="(<& /shared/msg, text=>'Down' &>)" />
            <img class="obvius-inactive" width="7" height="6" src="/pics/icons/sort-up-inactive.png" alt="(<& /shared/msg, text=>'Up' &>)" />
%             }
%             else {
            <a href="./?obvius_app_seqlist=1&amp;value=<% $next %>&amp;fieldname=<% $fieldname |u %>&newdocument=<% $new_document %>"><img width="7" height="6" src="/pics/icons/sort-down.png" alt="(<& /shared/msg, text=>'Down' &>)" /></a>
            <a href="./?obvius_app_seqlist=1&amp;value=<% $prev %>&amp;fieldname=<% $fieldname |u %>&newdocument=<% $new_document %>"><img width="7" height="6" src="/pics/icons/sort-up.png" alt="(<& /shared/msg, text=>'Up' &>)" /></a>
%             }
          </span>
        </li>
%         }
%         else {
        <li><% $sib->{title} |h %></li>
%         }
%     }
      </ul>
    </td>
  </tr>
<%args>
$seq
$inactive
$next
$prev
$new_document
$fieldname
</%args>
</%method>
%
<%args>
$fieldname
$value=>undef
</%args>
%
<%init>
$value=$obvius->get_version_field($vdoc, qw(seq)) if (!defined $value);

my $inactive=1;

my $sibs;

my $new_document = $r->param('newdocument') ? 1 : 0;

my $parent_doc=$obvius->get_doc_by_id($new_document ? $doc->Id : $doc->Parent);
my $parent_vdoc;
$parent_vdoc=$obvius->get_public_version($parent_doc) || $obvius->get_latest_version($parent_doc) if ($parent_doc);
if ($parent_vdoc) {
    $sibs=$m->comp('/portal/subdocs:get_subs', base_doc=>$parent_doc, base_vdoc=>$parent_vdoc);
    # Active only if the sortorder starts with [+-]seq:
    my $sortorder=$obvius->get_version_field($parent_vdoc, qw(sortorder));
    $inactive=0 if (defined $sortorder and $sortorder=~/^[+\-]seq/i);
}

if($new_document) {
    # First grab a copy of sibs, so we don't modify anything in the cache:
    $sibs = [ @$sibs ];

    # Make a fake doc:

    my $fake_doc = new Obvius::Document({
                                         id => 0,
                                         parent => $doc->Id,
                                         owner => $doc->Owner,
                                         group => $doc->Group,
                                         name => 'dummy'
                                        });

    # Make a fake vdoc...
    my $fake_vdoc = new Obvius::Version({
                                         title => $m->scomp('/shared/msg', text=>"This document"),
                                         seq => $value,
                                         docid => 0, 
                                         type => 0,  
                                         lang => 'en'                
                                        });
    $fake_vdoc->field('title' => $fake_vdoc->Title);
    $fake_vdoc->field('seq' => $fake_vdoc->Seq);

    my $fake_sib = {
                    doc => $fake_doc,
                    vdoc => $fake_vdoc,
                    title => $fake_vdoc->Title,
                    name => $fake_doc->Name,
                    fake => 1
                };

    push(@$sibs, $fake_sib);

}


my $current;
my @seqs=();
my $seq={};
if ($sibs) {
    foreach my $sib (@$sibs) {
        if ($sib->{fake} or ($sib->{doc}->Id==$doc->Id)) {
            $sib->{value}=$value;
            $current=$sib;
            next;
        }
        else {
            $sib->{value}=$sib->{vdoc}->Seq;
        }

        if (!exists $seq->{seq} or $seq->{seq}!=$sib->{value}) {
            $seq={ seq=>$sib->{value}, sibs=>[ $sib ] };
            push @seqs, $seq;
        }
        else {
            push @{$seq->{sibs}}, $sib;
        }
    }
}

my (@shown_seqs, @hidden_seqs);
for(@seqs) {
  if($_->{seq} >= 0) {
    push(@shown_seqs, $_);
  } else {
    push(@hidden_seqs, $_);
  }
}

if ($current) {
    # Put in in place.
    # XXX Note that this "insertion in place" does not take
    #     the original/real sort into account.
    my ($current_seq)=grep { $_->{seq}==$current->{value} } (@hidden_seqs, @shown_seqs);
    if ($current_seq) {
        # Find out where to put it:
        my $before=0;
        for(my $i=0; $i<scalar(@{$current_seq->{sibs}}); $i++) {
            $before=$i+1 if (lc($current->{title}) gt lc($current_seq->{sibs}->[$i]->{title}));
        }
        # Nudge it in place:
        splice @{$current_seq->{sibs}}, $before, 0, ($current);
    }
    else {
        $current_seq={ seq=>$current->{value}, sibs=>[ $current ] };

        if($current_seq->{seq} >= 0){
          stuff_in(\@shown_seqs, $current_seq)
        } else {
          stuff_in(\@hidden_seqs, $current_seq)
        }

    }
}

sub stuff_in {
  my($array, $item) = @_;
  
  my $value = $item->{seq};
  
  my $before=0;
  for(my $i=0; $i<scalar(@$array); $i++) {
    my $seq = $array->[$i]->{seq};
    if ($value>$seq) {
      $before=$i+1;
    }
  }
  splice @$array, $before, 0, ($item);
}

# Find prev_value/next_value:
my $prev_seq;
my ($current_seq)=grep { $_->{seq} == $current->{value} } (@hidden_seqs, @shown_seqs);
my $next_seq;
my $last_seq;
foreach ((@hidden_seqs, @shown_seqs)) {
    $prev_seq=$last_seq if($_->{seq} == $value);
    $next_seq=$_ if ($last_seq and $last_seq->{seq} == $value);
    $last_seq = $_;
}

my $prev=$current_seq->{seq}-10;
$prev=(scalar(@{$current_seq->{sibs}})==1 ? $prev_seq->{seq} : $prev_seq->{seq}+($current_seq->{seq}-$prev_seq->{seq})/2) if ($prev_seq);

my $next=$current_seq->{seq}+10;
$next=(scalar(@{$current_seq->{sibs}})==1 ? $next_seq->{seq} : $current_seq->{seq}+($next_seq->{seq}-$current_seq->{seq})/2) if ($next_seq);

</%init>
