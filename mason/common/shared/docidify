<% $out %>\
<%args>
$html
</%args>
<%init>
$out = '';
$html = Encode::decode('latin-1', $html);
$hostname_from_req = $r->hostname;
$p->parse($html);
$p->eof;
$m->scomp( '/shared/from_utf8', dataref => \$out);
</%init>
<%once>
use Encode;
# $out should be reset before parsing.
my $out='';
my $hostname_from_req = $r->hostname;
my $p = HTML::Parser->new(api_version=>3,
                            default_h=> [ sub { my($this, $text)=@_; $out.=$text }, "self, text" ],
                            start_h=> [sub {
                                                my($this, $tagname, $text, $attr)=@_;
                                                if($tagname eq 'a' and $attr->{href}) {

                                                    # Make urls relative to / and convert to .docid format if possible:
                                                    my $org_path = $attr->{href};
                                                    my ($docid_url, $replace) = $m->comp('docidify:url2docid', url=>$org_path);
                                                    if($docid_url) {
                                                        $text =~ s!\Q$replace\E!$docid_url!;
                                                    }

                                                    $out.=$text;

                                                } elsif($tagname eq 'img') {

                                                    # Make images relative to / and convert to .docid format if possible:

                                                    my $org_path = $attr->{src};
                                                    my ($docid_url, $replace) = $m->comp('docidify:url2docid', url=>$org_path);
                                                    if($docid_url) {
                                                        $text =~ s!\Q$replace\E!$docid_url!;
                                                    }

                                                    $out.=$text;
                                                } elsif($tagname eq 'object' and $attr->{type} and $attr->{type} eq 'application/x-shockwave-flash') {
                                                    my $org_path = $attr->{data};
                                                    if($org_path) {
                                                        my ($docid_url, $replace) = $m->comp('docidify:url2docid', url=>$org_path);
                                                        if($docid_url) {
                                                            $text =~ s!\Q$replace\E!$docid_url!;
                                                        }
                                                    }
                                                    $out .= $text;
                                                } elsif($tagname eq 'param' and $attr->{name} and ($attr->{name} eq 'movie' or $attr->{name} eq 'src')) {
                                                    my $org_path = $attr->{value};
                                                    if($org_path) {
                                                        my ($docid_url, $replace) = $m->comp('docidify:url2docid', url=>$org_path);
                                                        if($docid_url) {
                                                            $text =~ s!\Q$replace\E!$docid_url!;
                                                        }
                                                    }
                                                    $out .= $text;
                                                } else {
                                                    $out.=$text;
                                                }
                                                }, "self, tagname, text, attr" ],
                            end_h=> [sub {
                                            my($this, $tagname, $text, $attr)=@_;
                                            $out.=$text;
                                        }, "self, tagname, text, attr" ],
                            text_h=> [ sub {
                                        my ($this, $text)=@_;
                                        $out.=$text;
                                        },
                                        "self, text" ]);
$p->attr_encoded(0);
</%once>
<%method url2docid>
<%args>
$url
</%args>
<%init>
# Remove achor and querystring:
$url =~ s!#.*$!!;
$url =~ s!\?.*$!!;

# This is the part of the URL we want to replace with /<docid>.docid. Save it.
my $replace_part = $url;

# If we're on any admin host, remove hostname and admin part
unless($url =~ s!^https?://[^/]+/admin/!/!) {
    # Else just try to remove current hostname:
    $url =~ s!^http://$hostname_from_req/!/!;
    # and /admin/:
    $url =~ s!^/admin/!/!;
}


if($url =~ m!^/!) {
    if(my $doc = $obvius->lookup_document($url)) {
        $url = "/" . $doc->Id . ".docid";
        return ($url, $replace_part);
    }
}
return undef;
</%init>
</%method>
