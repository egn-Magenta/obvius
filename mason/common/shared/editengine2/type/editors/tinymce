<%method block>
%
<& ../util/label, name=>$prefix . $field->{name}, label=>$field->{label}, field=>$field &>
%
<%doc>
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXX This is mostly paste-copy from the old admin, just to try it out XXX
XXX For it to run, you need to create a symlink in                   XXX
XXX obvius/docs/scripts/tiny_mce to ../js/tiny_mce                   XXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
</%doc>
%
% unless ($r->notes('obvius_editor_loaded')) {
<script type="text/javascript" src="/scripts/tiny_mce/tiny_mce.js"></script>
<script type="text/javascript" src="/scripts/tiny_mce/tiny_mce_obvius.js"></script>
<script type="text/javascript" src="/scripts/admin_validator.js"></script>

<script type="text/javascript">
    tinyMCE.init({
%     # For configuration see below in the init block
%     for(@config_keys) {
        <% $_ %> : <% $config_values{$_} || '""' %>,
%     }
      argh_stupid_javascript_hashes : "dummy"
    });

    function obvius_save_tinymce() {
        tinyMCE.triggerSave();
    }

    /* XXX onsubmit_array[onsubmit_array.length] = obvius_save_tinymce; */
</script>
%     $r->notes('obvius_editor_loaded' => 1);
% }
%
<textarea mce_editable="true" id="<% $name %>" name="<% $name %>" cols="<% $cols %>" rows="<% $rows %>" style="height: <% $height %>px; width: <% $width %>px;" wrap="<% $wrap %>" tabindex="10"><% $value |h %></textarea>
%# Uncommented mce_editable and wrap from above, but this causes the editor not to work
%#<textarea id="<% $name %>" name="<% $name %>" cols="<% $cols %>" rows="<% $rows %>" style="height: <% $height %>px; width: <% $width %>px;" tabindex="10"><% $value |h %></textarea>

<script type="text/javascript">
/* XXX This is a bad check, Tiny MCE should be asked whether it is on or
   not. But... how? */
var tinymce_on=tinyMCE.isMSIE || tinyMCE.isGecko;

if (!tinymce_on) {
  document.write('<button id="obvius_validation_button_<% $name %>" onclick="javascript:obvius_validator_validate(document.getElementById(\'<% $name %>\').value); return false;"><& /shared/msg, text=>'Validate field' &></button>');
}
</script>
<noscript>
<p><& /shared/msg, text=>'The XHTML in this field will be validated when you save the document' &>.</p>
</noscript>


% # Notice that this has been changed from obvius_$name_compare to $name_editor_compare, here:
<input type="hidden" name="<% $name %>_editor_compare" value="<% $value |h %>"/>
%
%
<%args>
$prefix
$field
$validation
$value=>''
$disabled=>0
$cols=>60
$rows=>20
$wrap=>1
</%args>
%
<%init>
$value=$value->{value} if (ref $value eq 'HASH');

$value=$m->scomp('/shared/printhtml', html=>$value, noprefix=>1) if ($value);
$value=$m->scomp('/shared/xhtml2editorhtml', html=>$value) if ($value);

# Figure out whether we are creating a new document or editing an old.
# If we are creating a new one we should add the documents name
# to the document base used in the editors
my $uri_extra = '';
##if(my $ses_doc = $session->{document}) {
##    unless($ses_doc->param('id')) {
##        $uri_extra = $ses_doc->param('name') . '/';
##    }
##}

my $width=$cols*10;      # XXX?!
my $height=($rows+6)*16; # XXX?!

my $name=$prefix . $field->{name};

# If changing these remember to add quotes to strings etc:
my %config_values = (
    theme => '"advanced"',
    language => '"da"',
    mode => '"specific_textareas"',
    content_css => '"http://' . $r->hostname . '/style/editor.css"', # MSIE demands the http://hostname/-part
    valid_elements => '"*[*]"',
    plugins => '"table,obvius,searchreplace"',
    file_browser_callback => '"obvius_tinymce_new_navigator_callback"',
    cleanup_callback => '"obvius_tinymce_html_cleanup"',
    entities => '"160,nbsp,38,amp,34,quot,162,cent,8364,euro,163,pound,165,yen,169,copy,174,reg,8482,trade,8240,permil,181,micro,183,middot,8226,bull,8230,hellip,8242,prime,8243,Prime,167,sect,182,para,223,szlig,8249,lsaquo,8250,rsaquo,171,laquo,187,raquo,8216,lsquo,8217,rsquo,8220,ldquo,8221,rdquo,8218,sbquo,8222,bdquo,60,lt,62,gt,8804,le,8805,ge,8211,ndash,8212,mdash,175,macr,8254,oline,164,curren,166,brvbar,168,uml,161,iexcl,191,iquest,710,circ,732,tilde,176,deg,8722,minus,177,plusmn,247,divide,8260,frasl,215,times,185,sup1,178,sup2,179,sup3,188,frac14,189,frac12,190,frac34,402,fnof,8747,int,8721,sum,8734,infin,8730,radic,8764,sim,8773,cong,8776,asymp,8800,ne,8801,equiv,8712,isin,8713,notin,8715,ni,8719,prod,8743,and,8744,or,172,not,8745,cap,8746,cup,8706,part,8704,forall,8707,exist,8709,empty,8711,nabla,8727,lowast,8733,prop,8736,ang,180,acute,184,cedil,170,ordf,186,ordm,8224,dagger,8225,Dagger,192,Agrave,194,Acirc,195,Atilde,196,Auml,199,Ccedil,200,Egrave,202,Ecirc,203,Euml,204,Igrave,206,Icirc,207,Iuml,208,ETH,209,Ntilde,210,Ograve,212,Ocirc,213,Otilde,214,Ouml,338,OElig,217,Ugrave,219,Ucirc,220,Uuml,376,Yuml,222,THORN,224,agrave,226,acirc,227,atilde,228,auml,231,ccedil,232,egrave,234,ecirc,235,euml,236,igrave,238,icirc,239,iuml,240,eth,241,ntilde,242,ograve,244,ocirc,245,otilde,246,ouml,339,oelig,249,ugrave,251,ucirc,252,uuml,254,thorn,255,yuml,914,Beta,915,Gamma,916,Delta,917,Epsilon,918,Zeta,919,Eta,920,Theta,921,Iota,922,Kappa,923,Lambda,924,Mu,925,Nu,926,Xi,927,Omicron,928,Pi,929,Rho,931,Sigma,932,Tau,933,Upsilon,934,Phi,935,Chi,936,Psi,937,Omega,945,alpha,946,beta,947,gamma,948,delta,949,epsilon,950,zeta,951,eta,952,theta,953,iota,954,kappa,955,lambda,956,mu,957,nu,958,xi,959,omicron,960,pi,961,rho,962,sigmaf,963,sigma,964,tau,965,upsilon,966,phi,967,chi,968,psi,969,omega,8501,alefsym,982,piv,8476,real,977,thetasym,978,upsih,8472,weierp,8465,image,8592,larr,8593,uarr,8594,rarr,8595,darr,8596,harr,8629,crarr,8656,lArr,8657,uArr,8658,rArr,8659,dArr,8660,hArr,8756,there4,8834,sub,8835,sup,8836,nsub,8838,sube,8839,supe,8853,oplus,8855,otimes,8869,perp,8901,sdot,8968,lceil,8969,rceil,8970,lfloor,8971,rfloor,9001,lang,9002,rang,9674,loz,9824,spades,9827,clubs,9829,hearts,9830,diams,8194,ensp,8195,emsp,8201,thinsp,8204,zwnj,8205,zwj,8206,lrm,8207,rlm,173,shy"',
    theme_advanced_toolbar_location => '"top"',
    theme_advanced_buttons1 => '"formatselect,separator,bold,italic,underline,strikethrough,separator,sup,sub,removeformat,charmap,separator,justifyleft,justifycenter,justifyright,justifyfull"',
    theme_advanced_buttons2 => '"cut,copy,paste,separator,bullist,numlist,separator,outdent,indent,separator,undo,redo,separator,link,unlink,anchor,separator,image,help,separator,search,replace,separator,code,cleanup,w3ccheck"',
    theme_advanced_buttons3 => '"tablecontrols,separator,hr,visualaid"',
    theme_advanced_blockformats => '"p,address,h1,h2,h3,blockquote"',
    theme_advanced_disable  => '"styleselect,help"',
    document_base_url => '"' . $uri . $uri_extra . '"',
    apply_source_formatting => 1,
    relative_urls => "false",
    remove_script_host => "false",
    debug => "false",
    auto_reset_designmode => "true",
    obvius_w3c_check_via_xmlhttprequest => 1
);

my @config_keys = qw (
                        theme
                        language
                        mode
                        content_css
                        valid_elements
                        plugins
                        file_browser_callback
                        cleanup_callback
                        entities
                        theme_advanced_toolbar_location
                        theme_advanced_buttons1
                        theme_advanced_buttons2
                        theme_advanced_buttons3
                        theme_advanced_blockformats
                        theme_advanced_disable
                        document_base_url
                        apply_source_formatting
                        relative_urls
                        remove_script_host
                        debug
                        auto_reset_designmode
                        obvius_w3c_check_via_xmlhttprequest
                    );

# Add extra config keys if any:
my $extra_config_keys = $obvius->config->param('obvius_tinymce_extra_config_keys') || '';
for(split(/\s*,\s*/, $extra_config_keys)) {
    push(@config_keys, $_);
}

# Now, for each key, check if another value have been added in the config file:

for my $key (@config_keys) {
    if(my $val = $obvius->config->param("obvius_tinymce_$key")) {
        $config_values{$key} = $val;
    }
}
</%init>
%
</%method>
%
%
%
<%method inline>
%
<% $value->{value} |h %>\
%
<%args>
$value
</%args>
%
</%method>
%
%
%
% # Validation:
%
<%args>
$data
$id
$validation
</%args>
%
<%init>
my $ret='OK';

# Docidify hrefs and srcs so links and images wont be broken when moving documents:
$data->{$id}=$m->scomp('/shared/docidify', html=>$data->{$id});
# Run the component that converts the HTML that the editor uses to XHTML:
$data->{$id}=$m->scomp('/shared/editorhtml2xhtml', html=>$data->{$id});

# If we got a fieldspec, use that for validation:
$ret=$m->comp('../util/validate_by_fieldspec', %ARGS) if (exists $validation->{validate_by_fieldspec});

if ($ret eq 'OK') { # Now check XHTML validity:

    my ($status, $error_count, undef, undef, $result)=$m->comp('/shared/validator/validate', html=>$data->{$id});
    $ret='not-valid' if ($status ne 'Unknown' and $status ne 'Valid');

    if ($ret ne 'OK') { # XXX Just for debuggin'
        print STDERR "\n\nHTML: [", $data->{$id}, "]\nRET: $ret\n";
        print STDERR $result, "\n";
    }
}

return $ret;
</%init>
<%doc>
This component makes a textarea that in proper browsers will be replaced by the
tinyMCE WYSIWYG editor. TinyMCE will be called with a hardcoded set of default
options, but all these can be changed by setting obvius_tinymce_${option_name} in
the sites' config file. Additional options can be added by setting a comma-separated
list of config keys with obvius_tinymce_extra_config_keys in the sites' config
file.
</%doc>