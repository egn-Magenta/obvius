<% $out %>\
<%args>
$html
</%args>
<%init>
$out = '';
@blockquote = ();
$p->parse($html);
$p->eof;
$m->scomp( '/shared/from_utf8', dataref => \$out);
</%init>
<%once>
# $out should be reset before parsing.
my $out='';
my @blockquote;
my $p = HTML::Parser->new(api_version=>3,
                            default_h=> [ sub { my($this, $text)=@_; $out.=$text }, "self, text" ],
                            start_h=> [sub {
                                                my($this, $tagname, $attr, $attrseq)=@_;

                                                    # List of attributes to be removed from the tag:
                                                    my %remove_attr;
                                                    my %existing_attr = map { $_ => 1 } @$attrseq;

                                                    # Always remove "/"-attribute
                                                    $remove_attr{'/'} = 1;

                                                    # Tag specific changes:

                                                    # img
                                                    if($tagname eq 'img') {
                                                        # Remove hspace, vspace and align:
                                                        $remove_attr{'hspace'} = 1;
                                                        $remove_attr{'vspace'} = 1;
                                                        $remove_attr{'align'} = 1;

                                                        # Some things should be handled by styles instead of attributes:
                                                        $attr->{style} ||= '';

                                                        # Add a ; to the end of existing styles if it's not already there:
                                                        if($attr->{style} and $attr->{style} !~ m!;$!) {
                                                            $attr->{style} .= ";";
                                                        }

                                                        if(my $align = $attr->{align}) {
                                                            $attr->{style} =~ s/float:[^;]+;//;
							    if ($align =~ m/(left|right)/i) {
                                                            $attr->{style} .= "float: $align;";
							    }
							    else
							    {
								$attr->{style} .= "vertical-align: $align;";
							    }
                                                       }

                                                        if(my $vspace = $attr->{vspace}) {
                                                            $attr->{style} =~ s/margin-top:[^;]+;//;
                                                            $attr->{style} =~ s/margin-bottom:[^;]+;//;

                                                            $attr->{style} .= "margin-top: ${vspace}px;";
                                                            $attr->{style} .= "margin-bottom: ${vspace}px;";
                                                        }

                                                        if(my $hspace = $attr->{hspace}) {
                                                            $attr->{style} =~ s/margin-left:[^;]+;//;
                                                            $attr->{style} =~ s/margin-right:[^;]+;//;

                                                            $attr->{style} .= "margin-left: ${hspace}px;";
                                                            $attr->{style} .= "margin-right: ${hspace}px;";
                                                        }

                                                        # Add style to attrseq if it isn't already there:
                                                        if($attr->{style} and not $existing_attr{'style'}) {
                                                            push(@$attrseq, "style");
                                                        }

                                                        # Make sure we have an alt-tag
                                                        unless($existing_attr{'alt'}) {
                                                            push(@$attrseq, 'alt');
                                                            $attr->{alt} ||= "";
                                                        }

                                                        # Fixup ismap attribute
                                                        if($existing_attr{'ismap'}) {
                                                            $attr->{'ismap'} = "ismap";
                                                        }
                                                    }

                                                    # a
                                                    elsif($tagname eq 'a') {
                                                        $remove_attr{'target'} = 1;
                                                        if(my $t = $attr->{target}) {
                                                            # Don't put _self in there since it's the default:
                                                            if($t ne '_self') {
                                                                $attr->{onclick} = "this.target='" . $t . "'";
                                                                push(@$attrseq, 'onclick') unless($existing_attr{'onclick'});
                                                            }
                                                        }
                                                    }

                                                    # table
                                                    elsif($tagname eq 'table') {
                                                        $remove_attr{'align'} = 1;
                                                        $remove_attr{'width'} = 1;
                                                        $remove_attr{'height'} = 1;

                                                        if(my $align = $attr->{align}) {
                                                            $attr->{style} =~ s/float:[^;]+;//;
                                                            $attr->{style} .= "float: $align;";
                                                        }

                                                        if(my $width = $attr->{width}) {
                                                            $attr->{style} =~ s/width:[^;]+;//;
                                                            if($width =~ /\%$/) {
                                                                $attr->{style} .= "width: $width;";
                                                            } else {
                                                                $attr->{style} .= "width: ${width}px;";
                                                            }

                                                        }

                                                        if(my $height = $attr->{height}) {
                                                            $attr->{style} =~ s/height:[^;]+;//;
                                                            if($height =~ /\%$/) {
                                                                $attr->{style} .= "height: $height;";
                                                            } else {
                                                                $attr->{style} .= "height: ${height}px;";
                                                            }
                                                        }

                                                        push(@$attrseq, 'style') unless($existing_attr{'style'});
                                                    }

                                                    elsif($tagname eq 'td') {
                                                        # Remove tags if they don't contain a value
                                                        for(qw(align valign classname)) {
                                                            $remove_attr{$_} = 1 unless($attr->{$_});
                                                        }

                                                        $remove_attr{'width'} = 1;
                                                        $remove_attr{'height'} = 1;

                                                        if(my $width = $attr->{width}) {
                                                            $attr->{style} =~ s/width:[^;]+;//;
                                                            if($width =~ /\%$/) {
                                                                $attr->{style} .= "width: $width;";
                                                            } else {
                                                                $attr->{style} .= "width: ${width}px;";
                                                            }

                                                        }

                                                        if(my $height = $attr->{height}) {
                                                            $attr->{style} =~ s/height:[^;]+;//;
                                                            if($height =~ /\%$/) {
                                                                $attr->{style} .= "height: $height;";
                                                            } else {
                                                                $attr->{style} .= "height: ${height}px;";
                                                            }
                                                        }

                                                        push(@$attrseq, 'style') unless($existing_attr{'style'});
                                                    }

                                                    # strike, s => del
                                                    elsif($tagname eq 'strike' or $tagname eq 's') {
                                                        $tagname = 'del';
                                                    }

                                                    # u => em
                                                    elsif($tagname eq 'u') {
                                                        $tagname = 'span';
                                                        $attr->{style} ||='';
                                                        $attr->{style} .= 'text-decoration: underline;';

                                                        push(@$attrseq, 'style') unless($existing_attr{'style'});
                                                    }

                                                    # blockquote => div with padding:
                                                    elsif($tagname eq 'blockquote') {
                                                        # Don't do anything if blockquote has class="realblockquote"
                                                        if($attr->{class} && $attr->{class} eq 'realblockquote') {
                                                            push(@blockquote, 'real');
                                                        } else {
                                                            push(@blockquote, 'fake');
                                                            $tagname = 'div';
                                                            $attr->{class} = 'indent';
                                                            push(@$attrseq, 'class') unless($existing_attr{'class'});
                                                        }
                                                    }

                                                    # Fixup for align attribute on block elements:
                                                    if($tagname =~ m!^h\d|p|div! and $attr->{align}) {
                                                        $remove_attr{'align'} = 1;

                                                        unless($existing_attr{'style'}) {
                                                            $attr->{'style'} = '';
                                                            push(@$attrseq, 'style');
                                                        }

                                                        $attr->{style} =~ s/text-align:[^;]+;//;
                                                        $attr->{style} .= "text-align: " . $attr->{'align'} . ";";

                                                    }


                                                    # Remove attributes
                                                    @$attrseq = grep {
                                                                        ! $remove_attr{$_} # skip tags that were removed above:
                                                                        and
                                                                        $_ !~ /^(mce_|editor_id)/ # skip editor-specific tags
                                                                    } @$attrseq;

                                                    my $endtag = "";
                                                    $endtag = " /" if($tagname =~ /^(br|img|input)$/ or $existing_attr{'/'});

                                                    my $text = "<$tagname";
                                                    for(@$attrseq) {
							my $value = "";
                                                        $value = $attr->{$_};
							
                                                        $text .= " " . lc($_) . '="' . $value . '"';
                                                    }
                                                    $text .= "$endtag>";

                                                    $out.= $text;
                                                }, "self, tagname, attr, attrseq" ],
                            end_h=> [sub {
                                            my($this, $tagname, $text, $attr)=@_;

                                            if($tagname eq 'strike') {
                                                $text =~ s!</(strike|s)!</del!i;
                                            }

                                            elsif($tagname eq 'u') {
                                                $text =~ s!</u!</span!i;
                                            }

                                            elsif($tagname eq 'blockquote') {
                                                # If current blockquote is a fake type endtag need to be </div>

                                                # Default to real since an extra </blockquote> makes less mess than </div>
                                                my $type = pop(@blockquote) || 'real';
                                                if($type eq 'fake') {
                                                    $text = '</div>';
                                                }
                                            }
                                            $out.=lc($text);
                                        }, "self, tagname, text, attr" ],
                            text_h=> [ sub {
                                        my ($this, $text)=@_;
                                        $out.=$text;
                                        },
                                        "self, text" ]);

$p->attr_encoded(1); # Don't decode entities in attributes
</%once>