<% $out %>\
<%args>
$html
</%args>
<%init>
$out = '';
@open_divs = ();
$p->parse($html);
$p->eof;
$m->scomp( '/shared/from_utf8', dataref => \$out);
</%init>
<%once>
# $out should be reset before parsing.
my $out='';
my @open_divs;
my $p = HTML::Parser->new(api_version=>3,
                            default_h=> [ sub { my($this, $text)=@_; $out.=$text }, "self, text" ],
                            start_h=> [sub {
                                                my($this, $tagname, $text, $attr, $attrseq)=@_;
                                                    # List of attributes to be removed from the tag:
                                                    my %remove_attr;
                                                    my %existing_attr = map { $_ => 1 } @$attrseq;

                                                    # Always remove "/"-attribute
                                                    $remove_attr{'/'} = 1;

                                                    my $adjust = 0;

                                                    # Image:
                                                    if($tagname eq 'img' && $attr->{style}) {
                                                        # Set align from float:
                                                        if($attr->{style} =~ s!float:([^;]+);!!) {
                                                            my $align_val = $1;
                                                            $align_val =~ s/^\s+//;

                                                            $attr->{align} = $align_val;

                                                            push(@$attrseq, "align") unless($existing_attr{'align'});

                                                            $adjust = 1;
                                                        }

                                                        # No longer necessary to convert padding-styles back to
                                                        # hspace and vspace since the editor now allows editing of all
                                                        # four of the padding styles instead of hspace and vspace.

                                                        unless($attr->{style}) {
                                                            $remove_attr{'style'} = 1;
                                                        }
                                                    }

                                                    # Link
                                                    elsif($tagname eq 'a') {
                                                        if($attr->{onclick} and $attr->{onclick} =~ m!this.target='([^']+)'!) {
                                                            $attr->{target} = $1;
                                                            push(@$attrseq, 'target') unless ($existing_attr{'target'});
                                                            $remove_attr{'onclick'} = 1;
                                                            $adjust = 1;
                                                        }
                                                    }

                                                    # Table
                                                    elsif($tagname eq 'table' and $attr->{style}) {
                                                        # Set align from float
                                                        if($attr->{style} =~ s!float:([^;]+);!!) {
                                                            my $align_val = $1;
                                                            $align_val =~ s/^\s+//;

                                                            $attr->{align} = $align_val;

                                                            push(@$attrseq, "align") unless($existing_attr{'align'});

                                                            $adjust = 1;
                                                        }

                                                        # Set width
                                                        if($attr->{style} =~ s!width:([^;]+);!!) {
                                                            my $width_val = $1;
                                                            $width_val =~ s/^\s+//;
                                                            $width_val =~ s/px$//;

                                                            $attr->{width} = $width_val;

                                                            push(@$attrseq, "width") unless($existing_attr{'width'});

                                                            $adjust = 1;
                                                        }

                                                        # Set height
                                                        if($attr->{style} =~ s!height:([^;]+);!!) {
                                                            my $height_val = $1;
                                                            $height_val =~ s/^\s+//;
                                                            $height_val =~ s/px$//;

                                                            $attr->{height} = $height_val;

                                                            push(@$attrseq, "height") unless($existing_attr{'height'});

                                                            $adjust = 1;
                                                        }
                                                    }

                                                    # TD
                                                    elsif($tagname eq 'td' and $attr->{style}) {
                                                        # Set width
                                                        if($attr->{style} =~ s!width:([^;]+);!!) {
                                                            my $width_val = $1;
                                                            $width_val =~ s/^\s+//;
                                                            $width_val =~ s/px$//;

                                                            $attr->{width} = $width_val;

                                                            push(@$attrseq, "width") unless($existing_attr{'width'});

                                                            $adjust = 1;
                                                        }

                                                        # Set height
                                                        if($attr->{style} =~ s!height:([^;]+);!!) {
                                                            my $height_val = $1;
                                                            $height_val =~ s/^\s+//;
                                                            $height_val =~ s/px$//;

                                                            $attr->{height} = $height_val;

                                                            push(@$attrseq, "height") unless($existing_attr{'height'});

                                                            $adjust = 1;
                                                        }
                                                    }

                                                    # del => strike:
                                                    elsif($tagname eq 'del') {
                                                        $tagname = 'strike';
                                                        $adjust = 1;
                                                    }

                                                    # blockquote => div with padding
                                                    elsif($tagname eq 'div') {
                                                        if($attr->{class} and $attr->{class} eq 'indent') {
                                                            push(@open_divs, 'blockquote');
                                                            $tagname = 'blockquote';
                                                            $remove_attr{'class'} = 1;
                                                        } else {
                                                            push(@open_divs, 'normal');
                                                        }
                                                    }

                                                    if($tagname eq 'span' and $attr->{style} and $attr->{style} =~ s!text-decoration:\s+underline;?!!) {
                                                        $tagname = 'u';
                                                        $adjust = 1;
                                                        $this->{open_u_span} = 1;
                                                    }

                                                    # Fixup for align attribute on block elements:
                                                    if($tagname =~ m!^h\d|p|div! and $attr->{style} and $attr->{style} =~ s!text-align:\s+([^;]+);?!!) {
                                                        $attr->{'align'} = $1;
                                                        push(@$attrseq, "align") unless($existing_attr{'align'});
                                                        $adjust = 1;
                                                    }



                                                    # Remove style attribute if it's empty
                                                    unless($attr->{style}) {
                                                        $remove_attr{'style'} = 1;
                                                        $adjust = 1
                                                    }

                                                    if($adjust) {
                                                        my $endtag = "";
                                                        $endtag = " /" if($tagname =~ /^(br|img|input)$/ or $existing_attr{'/'});
                                                        @$attrseq = grep {
                                                                            ! $remove_attr{$_} # skip tags that were removed above
                                                                            and
                                                                            $_ !~ /^(mce_|editor_id)/ # skip editorspecific tags
                                                                        } @$attrseq;

                                                        $text = "<$tagname";
                                                        for(@$attrseq) {
                                                            $text .= " " . lc($_) . '="' . $attr->{$_} . '"';
                                                        }
                                                        $text .= "$endtag>";
                                                    }

                                                    $out.= $text;
                                                }, "self, tagname, text, attr, attrseq" ],
                            end_h=> [sub {
                                            my($this, $tagname, $text, $attr)=@_;

                                            if($tagname eq 'del') {
                                                $text =~ s!</del!</strike!i;
                                            } elsif($tagname eq 'div') {
                                                my $type = pop(@open_divs) || 'normal';
                                                if($type eq 'blockquote') {
                                                    $text = '</blockquote>';
                                                }
                                            }

                                            if($this->{open_u_span} and $tagname eq 'span') {
                                                $text = "</u>";
                                                $this->{open_u_span} = 0;
                                            }

                                            $out.=lc($text);
                                        }, "self, tagname, text, attr" ],
                            text_h=> [ sub {
                                        my ($this, $text)=@_;
                                        $out.=$text;
                                        },
                                        "self, text" ]);
$p->attr_encoded(1); # Don't decode entities in attributes
</%once>