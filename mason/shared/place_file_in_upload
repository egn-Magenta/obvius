<%once>
use File::Path;
use Digest::MD5 qw(md5_hex);
</%once>
<%args>
$fh
$type
$filename
</%args>
<%init>
my $value;

# Find docs dir
my $interp = $m->interp;
my $comp_root = $interp->comp_root || [];
my $docs_dir;

for(@$comp_root) {
    if($_->[0] eq 'docroot') {
        $docs_dir = $_->[1];
        last;
    }
}

$docs_dir||='';

my $id = md5_hex($r->the_request);
my $content_type = $type;
$content_type = 'unknown/unknown' unless ($content_type =~ s|^([a-zA-Z0-9.-]+/[a-zA-Z0-9.-]+).*|$1|);

my $upload_dir = $docs_dir . "/upload/$content_type/" . substr($id, 0, 8);
if(-d $upload_dir || mkpath($upload_dir, 0, 0775)) {
    $filename =~ s!^.*[/\\]([^/\\]+)$!$1!;
    local $/ = undef;
    open(FILE, ">$upload_dir/$filename");
    print FILE <$fh>;
    close(FILE);
    $value = "$upload_dir/$filename";
    $value =~ s!^$docs_dir!!;
}

if ( $content_type =~ m{^image/.+} ) {
    my $image_doctype = $obvius->get_doctype_by_name('Image');
    eval {
        $image_doctype->process_uploaded_image($obvius, $value, $content_type, $vdoc);
    };
    if ($@) {
        $@ =~ s{\s+Stack:.*}{}gs;
        print STDERR "ProcessUploadedImage: Failed with message: $@\n";
    }
}
</%init>
<% $value %>
