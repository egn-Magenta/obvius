<% $output %>
<%args>
</%args>
<%init>
use strict; use warnings;
use Data::Dumper;

my $output = '';
my $search = Obvius::SolrSearch->new;
sub csv_splitter {
    my @arg = @_;
    my @res;
    for my $arg (@arg) {
        push @res, split /\s*,\s*/, $arg;
    }
    return @res;
}

my %good_procs = (path => \&csv_splitter, query => 1, tags => \&csv_splitter,
                  published_before => 1, published_after => 1, doctype => 1,
                  offset => 1, limit => 1);

for my $key (keys %ARGS) {
     my $handler = $good_procs{$key};
     next if !$handler;

     my $arg = $ARGS{$key};
     
     my @args = ref $arg eq 'ARRAY' ? @$arg : ($arg);
     if (ref $handler) {
          @args = $handler->(@args);
     }
     
     @args = map { Encode::decode('utf-8', $_) } @args;
     $search->$key(@args);
}

my $config = Obvius::Config->new($r->dir_config('site'));
my $prefix = $ARGS{prefix};

my $res = $search->search($config->{SOLR_URL});

my $max_score = $res->{maxScore};

my $hostmap = Obvius::Hostmap->new_with_obvius({OBVIUS_CONFIG => $config});

my @docs;

my $decode_correctly  = sub {
     my $content = Encode::decode('UTF-8', $_[0]);
     $content = Encode::encode('cp-1252', $content);
     $content = Encode::decode('UTF-8', $content);
     
     return $content;
};

for my $doc (@{$res->{docs}}) {
     push @docs,{uri => $prefix ? $prefix . $doc->{path} : 
                        "http://" . $hostmap->absolute_uri($doc->{path}),
                 docdate => $doc->{docdate},
                 content => $decode_correctly->($doc->{content}),
                 teaser  => $decode_correctly->($doc->{teaser}),
                 title   => $decode_correctly->($doc->{title}),
                 score   => int(($doc->{score} / $max_score) * 100)};
}
$output = to_json({start => $res->{start},
                   numFound => $res->{numFound},
                   docs => \@docs});

end:
</%init>

<%once>
use JSON;
use Encode;
use Obvius::SolrSearch;
use Obvius::Hostmap;
use Obvius::Config;
</%once>
